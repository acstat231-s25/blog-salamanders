---
title: "Analyzing Lyrics and Sentiment Trends from the Rolling Stones Top 500 Songs of All Time"
subtitle: "Optional subtitle"
author: 
- "Jenna Holmes"
- "Claire Albus"
- "Albert Hu"
abstract: ""
---

```{r}
#| label: setup
#| include: false

# Improve digit display and NA display for kable tables
options(scipen = 1, knitr.kable.NA = "")

# Load necessary packages
library(tidyverse)
library(knitr)
library(kableExtra)
library(ggplot2)
library(plotly)
library(ggwordcloud)
library(xfun)
library(RColorBrewer)
library(wordcloud)
library(ggpubr)
library(scales)

# set up color palette for the next few plots
 new_palette <- colorRampPalette(colors = c("#6b34eb"
                                            , "#F3AB4D"
                                            , "#eb6309"
                                            , "#d92b1e"
                                            , "#540340"
                                            , "#C6C2B8" ))(6)

```

```{r}
include_graphics("images/record.jpg")
# https://pixabay.com/photos/plate-vinyl-record-records-vinyl-4725349/
```

# Getting started

This is an example of a Quarto website. All the [Quarto markdown features](https://quarto.org/docs/authoring/markdown-basics.html) we learned for formatting text, adding headings and subheadings, adding code and output, adding labels and captions and whatnot work as usual. 

# Introduction

Music is a major source of entertainment that strongly influences the lives of many individuals. This project seeks to investigate different trends in music lyrics through the use of text and sentiment analysis, using data of songs included in the Rolling Stone's Top 500 Greatest Songs of All Time.

We are interested in exploring the following 3 main research questions:

1. How do the frequencies of certain words differ across lyrics from the following three music genres: Rock (1970's - 2000's), Dance (1960's - 1980's), and Slow?
2. How do the sentiments for different lyrics change across genres and time periods, and how do song time and beats per minute affect sentiment scores?
3. Do certain BPMs, song durations, years, and artists appear more frequently in Rolling Stoneâ€™s 500 Greatest Songs of All Time Ranking?

# Data Collection

We collected data from an [online music database](https://cs.uwaterloo.ca/~dtompkin/music/list/Best9.html) created by Dave Tompkins, a professor at the University of Waterloo in Canada. The initial dataset we scraped contains 7 variables:

`number`: the number of the track
<br>`artist`: the artist who created the song 
<br>`title`: the name of the song
<br>`time`: the length of the song
<br>`bpm`: the beats per minute of the song
<br>`year`: the year the song was released
<br>`genre`: the genre the song belongs to

The lyrics for each song were contained in another webpage linked to the original, so we iterated through and scraped the song lyrics for 484 songs (16 of the songs did not have lyrics available). Next, we combined the lyrics dataset with the initial dataset. Thus, we ended up with 8 variables (the original 7 plus `lyrics`). It is also worth noting that a good portion (144) of the songs we are analyzing do not have a specific genre because they were labeled as "TBD" (to be determined) in the database.

# Data Wrangling & Methods

In order to answer our research questions, we needed to wrangle our scraped data. 

To investigate how sentiments for song lyrics changed across different genres, we created multiple datasets that included the average sentiment of lyrics of all songs released in each year and each genre. We used the AFINN lexicon, which contains 2477 words and their corresponding sentiment scores, to identify matching words from the song lyrics and assign each of these words a sentiment score. The scores range from 5 to -5, with 5 being the most positive, -5 being the most negative, and 0 being neutral.

# Visualizations

### Word Clouds for Lyrics' Word Frequencies by Genre

::: {.panel-tabset}

### Rock

```{r}
#| label: Tab 1 - Rock
#| include: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 6

Rock_word_freqs = read_csv("data/Rock_lyrics_word_freqs.csv")

# 1970s Rock decade
Rock1 <- ggplot(Rock_word_freqs |> 
                  filter(decade == "1970") |>
                   slice_max(n, n = 44), 
                aes(label = word, size = n, color = n)) +  
  geom_text_wordcloud(
    family = "sans",             
    random.order = TRUE,    
    # Percentage of words rotated
    rotate_ratio = 0.15,          
    # Use `color` for word color, depending on frequency
    show.legend = FALSE,
    rm_outside = TRUE,
    #word sizes proportionate to cloud area
    area_corr = TRUE
  ) +
  # Size scale for cloud
  scale_size_area(max_size = 15) +
  scale_color_gradientn(colors = brewer.pal(9, "Set1")) + 
  ggtitle("Rock Word Cloud - 1970s") +  
  theme_minimal() +  
  theme(legend.position = "none",  
        plot.background = element_rect(fill = "white", color = "white")) 

# 1980s Rock decade
Rock2 <- ggplot(Rock_word_freqs |> 
                  filter(decade == "1980") |>
                   slice_max(n, n = 44), 
                aes(label = word, size = n, color = n)) +  
  geom_text_wordcloud(
    family = "sans",             
    random.order = TRUE,  
    # Percentage of words rotated
    rotate_ratio = 0.15,           
    # Use `color` for word color, depending on frequency
    show.legend = FALSE,
    rm_outside = TRUE,
    #word sizes proportionate to cloud area
    area_corr = TRUE
  ) +
  # Size scale for cloud
  scale_size_area(max_size = 18) +
  scale_color_gradientn(colors = brewer.pal(9, "Set1")) + 
  ggtitle("Rock Word Cloud - 1980s") +  
  theme_minimal() +  
  theme(legend.position = "none",  
        plot.background = element_rect(fill = "white", color = "white"))

# 1990s Rock decade
Rock3 <- ggplot(Rock_word_freqs |> 
                  filter(decade == "1990") |>
                   slice_max(n, n = 30), 
                aes(label = word, size = n, color = n)) +  
  geom_text_wordcloud(
    family = "sans",               
    random.order = TRUE,
    # Percentage of words rotated
    rotate_ratio = 0.15, 
    # Use `color` for word color, depending on frequency
    show.legend = FALSE,
    rm_outside = TRUE,
    #word sizes proportionate to cloud area
    area_corr = TRUE
  ) +
  # Size scale for cloud
  scale_size_area(max_size = 15) +
  scale_color_gradientn(colors = brewer.pal(9, "Set1")) +  
  ggtitle("Rock Word Cloud - 1990s") +  
  theme_minimal() + 
  theme(legend.position = "none", 
        plot.background = element_rect(fill = "white", color = "white"))

# 2000s Rock decade
Rock4 <- ggplot(Rock_word_freqs |> 
                  filter(decade == "2000") |>
                   slice_max(n, n = 44), 
                aes(label = word, size = n, color = n)) +  
  geom_text_wordcloud(
    family = "sans",           
    random.order = TRUE,     
    # Percentage of words rotated
    rotate_ratio = 0.15,           
    # Use `color` for word color, depending on frequency
    show.legend = FALSE,
    rm_outside = TRUE,
    #word sizes proportionate to cloud area
    area_corr = TRUE
  ) +
  # Size scale for cloud
  scale_size_area(max_size = 20) +
  scale_color_gradientn(colors = brewer.pal(9, "Set1")) + 
  ggtitle("Rock Word Cloud - 2000s") +
  theme_minimal() + 
  theme(legend.position = "none", 
        plot.background = element_rect(fill = "white", color = "white"))

#arrange four clouds for one tab
ggarrange(Rock1, Rock2, Rock3, Rock4, ncol = 2, nrow = 2)
```

### Dance

```{r}
#| label: Tab 2 - Dance
#| include: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 6

Dance_word_freqs = read_csv("data/Dance_lyrics_word_freqs.csv")

# 1960s Dance decade
Dance1 <- ggplot(Dance_word_freqs |> 
                   filter(decade == "1960") |>
                   slice_max(n, n = 45), 
                aes(label = word, size = n, color = n)) +  
  geom_text_wordcloud(
    family = "sans",             
    random.order = TRUE,
    # Percentage of words rotated
    rotate_ratio = 0.15,          
    # Use `color` for word color, depending on frequency
    show.legend = FALSE,
    rm_outside = TRUE,
    #word sizes proportionate to cloud area
    area_corr = TRUE
  ) +
  # Size scale for cloud
  scale_size_area(max_size = 20) +
  scale_color_gradientn(colors = brewer.pal(9, "Set1")) + 
  ggtitle("Dance Word Cloud - 1960s") +  
  theme_minimal() +  
  theme(legend.position = "none",  
        plot.background = element_rect(fill = "white", color = "white")) 

# 1970s Dance decade
Dance2 <- ggplot(Dance_word_freqs |> 
                   filter(decade == "1970") |>
                   slice_max(n, n = 45),
                aes(label = word, size = n, color = n)) +  
  geom_text_wordcloud(
    family = "sans",             
    random.order = TRUE,
    # Percentage of words rotated
    rotate_ratio = 0.15,           
    # Use `color` for word color, depending on frequency
    show.legend = FALSE ,
    rm_outside = TRUE,
    #word sizes proportionate to cloud area
    area_corr = TRUE
  ) +
  # Size scale for cloud
  scale_size_area(max_size = 20) +
  scale_color_gradientn(colors = brewer.pal(9, "Set1")) + 
  ggtitle("Dance Word Cloud - 1970s") +  
  theme_minimal() +  
  theme(legend.position = "none",  
        plot.background = element_rect(fill = "white", color = "white"))

# 1980s Dance decade
Dance3 <- ggplot(Dance_word_freqs |> 
                   filter(decade == "1980") |>
                   slice_max(n, n = 45), 
                aes(label = word, size = n, color = n)) +  
  geom_text_wordcloud(
    family = "sans",               
    random.order = TRUE,
    # Percentage of words rotated
    rotate_ratio = 0.15, 
    # Use `color` for word color, depending on frequency
    show.legend = FALSE,
    rm_outside = TRUE,
    #word sizes proportionate to cloud area
    area_corr = TRUE
  ) +
  # Size scale for cloud
  scale_size_area(max_size = 17) +
  scale_color_gradientn(colors = brewer.pal(9, "Set1")) +  
  ggtitle("Dance Word Cloud - 1980s") +  
  theme_minimal() + 
  theme(legend.position = "none", 
        plot.background = element_rect(fill = "white", color = "white"))

#arrange three clouds for one tab
ggarrange(Dance1, Dance2, Dance3, ncol = 2, nrow = 2)
```

### Slow

```{r}
#| label: Tab 3 - Slow
#| include: true
#| message: false
#| warning: false
#| fig-width: 8
#| fig-height: 6

Slow_word_freqs = read_csv("data/Slow_lyrics_word_freqs.csv")

# Slow word cloud
Slow_word_freqs |>
    with(wordcloud(words = word,
                   freq = n,
                  max.words = 50,
random.order = TRUE,
# Specify the range of the size of the words
scale = c(4, 0.6),
# Specify proportion of words with 90 degree rotation
rot.per = 0.15,
# Color words from least to most frequent
colors = brewer.pal(10, "Dark2"),
family = "sans"))
```

:::

The Rock tab displays word frequencies within the genre in the form of four word clouds, one each from the 1970's, 1980's, 1990's, and 2000's. The 70's Rock word cloud conveys "time," "future," and "lord" as three of the most common words in this decade for the Rock genre, representing people's faith and desires for future change. Numerous anti-war protests, women's liberation acts, civil rights movements, etc. occurred during this decade, alluding to the aforementioned terms having higher frequencies in song lyrics. The terms "love" and "baby" are emphasized in the 80's Rock word cloud, supporting the fact that this decade produced countless unforgettable love songs, including "Should I Stay or Should I Go" by The Clash, "With or Without You" by U2, "Love Shack" by The B-52's. The 90's word cloud highlights words such as "perdedor," "kill," "denial," and "loser." Nirvana became incredibly popular during the early 90's, which contributed significantly to the rebellious spirit of the decade, as seen in these most common words from the cloud. The 2000's word cloud displays "life" and "lust" as having the highest word frequencies in Rock songs from this decade, which is sensible given that Indie rock was born in the early 2000's, bringing with it themes of independence and authenticity. Referencing the four word clouds, the Rock genre overall conveys strong ideas of love and a representation of the societal and musical changes as well as movements that occurred during each decade.

Similarly, the Dance tab portrays word frequencies within the genre via three word clouds, one each from the 1960's, 1970's, and 1980's. The 60's word cloud shows "baby," "love," and "chain" as the words with higher frequencies in the Dance genre during this decade, which is supported by the fact that love was one of the more popular themes in 1960's music. According to the 70's cloud, "funk" and "light" had high word frequencies is the Dance music genre, given that funk and rhythm were popular in the 1970's. The 80's cloud demonstrates "boogie," "beat," "bang," and "party" as words of higher frequencies is this decade of Dance music, which aligns with the fact that the boogie sound was defined in the early 80's. Love, attachment, and funk are words of high frequency in the cumulative Dance genre (all three decades combined), and each decade had words of higher frequencies that were associated with popular themes during each of those years, such as the boogie and funk.

Lastly, the Slow tab conveys word frequencies from the cumulative Slow music genre and displays "chain," "beat," "boogie," and "baby" as the terms with higher frequencies, supported by the alignment of these terms with the emotional themes of Slow music. "Chain" is a term often used in slower songs to represent emotional bondage and attachment. The term "beat" can be used to convey slower rhythms, and "boogie" is used in a nostalgic sense. "Baby" is often used in lyrics of love, which commonly occur in slower songs.

Each of the three genres differ in terms of the themes conveyed by their most frequent words, however love is a commonly represented notion.



## Through the Decades 

```{r}
 #| label: decade favorability
 #| include: true
 #| warning: false
 #| message: false
 
 
 # necessary data wrangling since r reads the decades as integers instead 
 # of levels in the csv 
 songs_chart = read_csv("data/songs_chart.csv")
 # add back the s to the decades
 songs_chart$decade = paste0(songs_chart$decade, "s")
 # decade integers to factors in a logical order
 songs_chart$decade = 
    factor(songs_chart$decade
           , levels = c('50s', '60s', '70s', '80s', '90s', '2000s')) 
 # sort rank blocks into order that best demonstrates top 100 distribution
 songs_chart$block =
   factor(songs_chart$block
          , levels = c('500s', '400s', '300s', '200s', 'Top 100'))
 # build plot
 songs_chart |> 
   # Create segmented histogram
   ggplot(aes(x = decade, fill = block)) +
     geom_bar(position = "stack", color = "black") +
     
     scale_fill_manual(values = new_palette, name = "Rank") +
     labs(
      title = "Decades in the Rolling Stone Top 500"
      , subtitle = "Broken Down By Rank"
      , x = "Decade of Release"
      , y = "Number of Songs"
      ) +
     theme_linedraw() +
     theme(plot.caption = element_text(hjust = -0.5)
           , axis.title.x = element_text(vjust = -0.3)
           , axis.text.x = element_text(size = rel(1.25)))
```
 
The graphic above shows the distribution of the decades represented in <i>Rolling Stone</i> Magazine's Top 500 Songs of All Time. In this, we can see that the 1960s are the clear leader in terms of representation on the list. In fact, roughly 35% of the songs on the list are from the 60s. The 70s follow at around 25%, and the 50s, 80s, and 90s each represent around 10-13% of the list. There is a clear trend downward from the 60s to the 2000s, with the 2000s being the least represented decade. 
 
 Taking a closer look at where the songs fall in the ranking categories, i.e., Top 100, 200s, and so on, we can see that the 1960s have the most songs in the top 100 among all decades, but this follows from 60s songs' representation in the list. Interestingly, even though the 70s have many more songs on the list than the 50s, the 50s have slightly more songs in the Top 100.
 
 
### Rolling Stone's Top Three Artists
::: {.panel-tabset}
 
### Top Artists

```{r}
#| label: decades of top artists' songs
#| include: true
#| message: false
#| warning: false


 # necessary data wrangling since r reads the decades as integers instead 
 # of levels in the csv 
 top_artists = read_csv("data/top_artists.csv")
 # add the s back to the decades
 top_artists$decade = paste0(top_artists$decade, "s")
 # decade integers to factors in a logical order
 top_artists$decade = 
    factor(top_artists$decade
           , levels = c('2000s', '90s', '80s', '70s', '60s', '50s'))  
 
 top_artists |> 
   # Create segmented histogram
   ggplot(aes(x = artist, fill = decade)) +
     geom_bar(color = "black") +
     scale_fill_manual(values = new_palette, name = "Decade") +
     labs(
      title = "The Top 3 Most Represented Artists"
      , subtitle = "By the Decade Their Songs Were Released"
      , x = "Artist"
      , y = "Number of Songs"
      , tag = " "
      , caption = " "
      ) +
     theme_linedraw() +
     theme(axis.title.x = element_text(size = rel(1.25), vjust = -0.25)
           # , axis.text.y = element_text(angle = 45, margin = margin(r=1))
           ) 
 
```



### Top Sentiments

```{r}
#| label: sentiment of top artists' songs
#| include: true
#| message: false
#| warning: false

songs_chart = read_csv("data/songs_chart.csv")
sentiment_by_artist = read_csv("data/sentiment_by_artists.csv")

# palette for plot
new_palette2 = colorRampPalette(colors = c("#540340"
                                            , "#eb6309"
                                            , "#d92b1e"))(3)
sentiment_by_artist |>
   ggplot(aes(x = artist, y = mean, fill = artist)) +
   scale_fill_manual(values = new_palette2) +
   geom_col(stat = "identity") +
   labs(
     title = "Sentiments of The Top 3"
     , y = "Average Sentiment"
     , x = "Artist"
   ) +
   geom_text(aes(label = mean), vjust = -0.125) +
   theme_linedraw() +
   geom_hline(yintercept = 0, linetype = "dashed") +
   guides(fill = FALSE) +
   theme(axis.title.x = element_text(vjust = -0.3)
        # , axis.title.y = element_text(vjust = -0.3)
         )
```

:::

For music lovers and <i>Rolling Stone</i> Magazine subscription-holders, it will come as little surprise that the top 3 artists represented in Rolling Stone's Top 500 are, in order, The Beatles, The Rolling Stones, and Bob Dylan. The Top Artists chart demonstrates the margin by which The Beatles' songs outnumber the other two. The Beatles have a stunning 23 songs on the list---24 if you include John Lennon's <i>Imagine</i>. The top ranking song from the supergroup is <i>Hey Jude</i> which ranks at 8 on the list. The Rolling Stones follow The Beatles with 14 songs, their first on the list, <i>Satisfaction</i>, at slot 2. Finally, Bob Dylan's first feature, the number 1 slot on the list, is <i>Like a Rolling Stone</i>. 


# Conclusions

# Limitations

# References




## Website project structure


The website project folder/repo will contain the following files, at a minimum:

* `_quarto.yml`: A configuration file that controls the YAML content, similar to what we typically see at the top of our qmd files. 

  Use this file to add or remove additional subpages, change the overall website title, customize the [navigation bar contents and layout](https://quarto.org/docs/websites/website-navigation.html), change the [website theme](https://quarto.org/docs/output-formats/html-themes.html), and set any other default formatting options such as code chunk options.

* `index.qmd`: This is the landing page of your website. This file must be called *index.qmd* and must be located in the root directory of the project.

  Use this page, at a minimum, to introduce your project. From there you can either fully include the contents of the project or use additional qmd files to create subpages of your website (perhaps explaining the structure of the website to the user on this landing page).

* `bib` folder: Contains the bibliography file, which you should edit to include your resources, and a *.csl* file that tells Quarto how to format in-text citations and the bibliography list according to the American Statistical Association citation style. 

* `docs` folder: The rendered content of the website will be located here.

* `styles.css`: This file is currently empty, but if you want to modify or replace the default theme, do so here using CSS. Students in the past have used custom color palettes or custom fonts, for example.

* Additional qmd files: If you want to add subpages with their own content, create new qmd files in your root directory to do so, being sure to include them in the list of contents in your `_quarto.yml` file. 

### Other recommended content:

Similar to the Shiny project, you will need to organize your wrangling scripts and data. You may also have other images or figures saved for displaying in your blog that will also need to be organized. Here are recommendations for organization.

* `scripts`: Store wrangling scripts in their own folder

* `data`: Store datasets in their own folder, being sure to separate raw data from clean/processed data. You can do this in one of two ways: two separate data folders in the root directory (e.g., `raw-data` and `data`) or two subfolders of a single `data` folder (subfolders called, for example, `raw`, `processed`).

* `images`: Organize saved images or figures together in their own folder. Make sure you keep track of the source of the images or figures and credit the sources in some way in your page (include source in caption and/or link image to source)

## Workflow

1. Edit contents of any files. Each new qmd file is a self-contained environment, so you will need to load any necessary packages and datasets for rendering that particular file at the top of that file.

2. After updating a qmd file, **Render** the qmd file. Note that the rendered files (.html etc) are in the `docs` folder. Keep them there!

3. Commit changes to website and PUSH to publish those changes. 


# Citations, cross-referencing, and linking between pages

## Cross-referencing

You should use code chunk labels and in-text [cross-references for figures and tables](https://quarto.org/docs/authoring/cross-references.html#computations) (see the *Knitr* examples at the link). 

Quarto additionally provides similar syntax for [creating labels for and cross-referencing equations](https://quarto.org/docs/authoring/cross-references.html#equations), [creating labels for and cross-referencing sections](https://quarto.org/docs/authoring/cross-references.html#sections), and using code chunk options of the form `lst-label: lst-your-listing-label` and `lst-cap: Code chunk caption` to be able to cross-reference displayed code chunks (or "listings") using the syntax `@lst-your-listing-label` within the text. 

These are not required for this project but are good practice.


## Creating and linking to subpages

You can create subpages by simply creating new qmd files. Any subpage you want to include on the website should be added to the website navigation list in the `_quarto.yml` file. 

You can [link to another page on the website](another-page.qmd) by using just the filepath to the corresponding qmd file. You can also [link directly to a section of a subpage](yet-another-page.qmd#sec-note). 


## Creating the bibliography

One of the new challenges of Quarto, relative to a Word or Google doc, is learning how to build a bibliography and use the specified citation keys to write in-text citations.

All items you plan to cite should be added to the `library.bib` bibliography file, which *you can open from within RStudio and edit just like any other text file*. You should use standard bibtex syntax for each entry, following the examples provided. If the resource you are using doesn't already provide a way to generate a bibtex entry, I recommend using [zoterobib](https://zbib.org) to generate the appropriate syntax (must change the Bibliography style to "BibTeX generic citation style"). The entries currently in `library.bib` are intended to provide syntax examples that capture the range of entries you are most likely to use. **You will need to delete and replace the contents of `library.bib` with your own citation entries.**

::: {.callout-note}
The examples in `library.bib` are nicely formatted so you can read and follow the patterns, but formatting and order of the `library.bib` file doesn't actually matter and will not be assessed. Just be sure the citations are as complete as possible (authors, titles, dates, urls, dois, etc.).
:::

```markdown
@book{hadley2016,
  author = {Hadley, Wickham}, 
  title = {ggplot2: Elegant Graphics for Data Analysis}, 
  url  = {https://ggplot2-book.org},
  publisher = {Springer},
  address = {New York, NY},
  type = {Online book},
  year = {2016},
  edition = {3}
}
```


## Creating in-text citations

Items you cite in the text will be automatically added to a list of References at the bottom of the corresponding page. To cite a reference in the text, use the corresponding *citation key* (the first item in each bibtex entry---it shouldn't have any spaces or special characters) and format the citation using the appropriate [quarto format for in-text citations](https://quarto.org/docs/authoring/citations.html#sec-citations). This is similar to how we cross-reference tables and figures from code chunk labels. For example, the syntax 

```
@hadley2016 provides excellent examples of customizing our visualizations using **ggplot2**.
``` 

produces the following text:

> @hadley2016 provides excellent examples of customizing our visualizations using **ggplot2**.

And the corresponding reference is listed in full at the bottom of this page. 


# Quarto website features


Below I demonstrate examples for customizing aspects of your webpage. In the `_quarto.yml` file you'll see additional links and information about customizing the website further. 

::: {.callout-warning}
Focus on completing the blog content first! You can play with features and customization *after* you're happy with the contents of the blog.
:::


## Including images or gifs

I would strongly recommend  using **knitr**'s `include_graphics()` functions within code chunks to include images or gifs within your blog. This makes it easier to modify figures, add captions and links, and visually find the code for figures quickly if you need to modify something about the output. There is also [markdown syntax to display or embed images](https://quarto.org/docs/authoring/figures.html), but I would typically not recommend it.

```{r}
#| fig-cap: "Image courtesy of giphy.com"
#| fig-align: center 
#| out-width: 100%
#| fig-link: "https://giphy.com/gifs/insecurehbo-3og0IT6sIWd1eh7bJm"

include_graphics("https://i.giphy.com/3og0IT6sIWd1eh7bJm.webp")
```

Either approach will take either a filepath to a stored file or a URL to an image or gif. Width can be specified as a percentage of the width of the page (0% to 100%; my preferred approach) or as a fixed number of units (e.g. 400px, 3in, 10cm). 

I can't imagine a scenario where students should or would include videos within their blog, but Quarto provides [guidance on embedding videos](https://quarto.org/docs/authoring/videos.html), as well.

::: {.callout-note}
The first figure of your blog will be used as the display image on our course's landing page!
:::



## Panel tabsets

Use the following format to add information or tables or visualizations in [tabset panels](https://quarto.org/docs/interactive/layout.html#tabset-panel).

::: {.panel-tabset}

### Tab 1

Some information in one tab 


### Tab 2

Some information in a different tab

:::

## Panel layouts for content

Use the following format to have more control over the [panel layout](https://quarto.org/docs/authoring/figures.html#complex-layouts) of various components. 

The syntax "[ [1], [1,1] ]" indicates that we have three pieces of content that we want to spread across two rows. The first piece of content will be in its own row, and then the next two components will be split across two columns of equal width in a second row. 


::: {layout="[ [1], [1,1] ]"}

### Row 1 with only one output

Some content


### First column of row 2

Some other content

### Second column of row 2

Some additional content.

:::

The values provided within each row specify the relative widths of the content within that row. For example "[1,2,1]" would create a row with 3 columns where the first and third columns are the same width and the middle column is twice as wide.


## Layouts for tables and visualizations produced by code chunks

For details on how to layout subfigures from multiple graphs produced by the same code chunk, see the examples in the **Knitr** tabs of the sections on [figure layouts, subcaptions, and custom layouts](https://quarto.org/docs/authoring/figures.html#layout).

The same syntax shown across the linked examples can be used to create subtables by replacing `fig-cap` and `fig-subcap` with `tbl-cap` and `tbl-subcap`. 

Two examples in @tbl-layout and @fig-layout below are borrowed and slightly modified from the linked sections. 

```{r}
#| label: tbl-layout
#| tbl-cap: "Two tables side-by-side"
#| tbl-subcap: 
#|   - "First three rows of cars dataset"
#|   - "First three rows of pressure dataset"
#| layout-ncol: 2

cars |> 
  slice(1:3) |> 
  kable()

pressure |> 
  slice(1:3) |> 
  kable()
```


```{r}
#| label: fig-layout
#| fig-cap: "Three figures in a complex layout"
#| fig-subcap: 
#|   - "cars"
#|   - "pressure"
#|   - "mtcars"
#| layout: [[4, -1, 4], [1]] 

ggplot(cars, aes(speed, dist)) +
  geom_point()

ggplot(pressure, aes(temperature, pressure)) +
  geom_point()

ggplot(mtcars, aes(hp, mpg)) +
  geom_point()
```

